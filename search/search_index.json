{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Geo routing for Python users, supporting most of the routing tools, including OSRM, Google Maps, Bing Maps, etc. with a unified API. </p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://wybert.github.io/georouting</li> </ul> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Support most of the routing services, including Google Maps, Bing Maps, OSRM, etc.</li> <li>Provide a unified API for routing services</li> <li>Support calculating the travel distance matrix between multiple origins and destinations</li> <li>Support calculating the travel distance according to OD pairs.</li> <li>Easy to visualize the routing results</li> <li>Return the travel distance matrix in a Pandas <code>Dataframe</code> you like</li> <li>Return the routing results in a Geopandas <code>GeoDataFrame</code></li> <li>Easy to extend to support more routing services</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v008-2023-02-11","title":"v0.0.8 - 2023-02-11","text":"<p>Improvement:</p> <ul> <li>improved the documentation</li> </ul> <p>New Features:</p> <ul> <li>added unified API for all routers</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/wybert/georouting/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>georouting could always use more documentation, whether as part of the official georouting docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/wybert/georouting/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up georouting for local development.</p> <ol> <li> <p>Fork the georouting repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/georouting.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv georouting\n$ cd georouting/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 georouting tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/wybert/georouting/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"georouting/","title":"Georouting","text":""},{"location":"georouting/#routers","title":"Routers","text":""},{"location":"georouting/#googlerouter","title":"GoogleRouter","text":"<p>Google Map router. The GoogleRouter class is a subclass of the WebRouter class and is used for routing using the Google Maps API. This class is designed to provide a convenient and easy-to-use interface for interacting with the Google Maps API.</p> <p>It will return a router object that can be used to get routes and distance matrices.</p>"},{"location":"georouting/#georouting.routers.google.GoogleRouter--parameters","title":"Parameters","text":"<ul> <li> <p><code>api_key</code> : str     The API key for the Google Maps API.</p> </li> <li> <p><code>mode</code> : str     The routing mode. Can be either \"driving\" or \"walking\".</p> </li> <li> <p><code>timeout</code> : int     The timeout in seconds for API requests.</p> </li> <li> <p><code>language</code> : str     The language to be used in API requests.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.google.GoogleRouter--returns","title":"Returns","text":"<ul> <li><code>GoogleRouter</code>:     A router object that can be used to get routes and distance matrices.</li> </ul> Source code in <code>georouting/routers/google.py</code> <pre><code>class GoogleRouter(WebRouter):\n    \"\"\"Google Map router.\n    The GoogleRouter class is a subclass of the WebRouter class and is used for routing using the Google Maps API.\n    This class is designed to provide a convenient and easy-to-use interface for interacting with the Google Maps API.\n\n    It will return a router object that can be used to get routes and distance matrices.\n\n    Parameters\n    ----------\n\n    - `api_key` : str\n        The API key for the Google Maps API.\n\n    - `mode` : str\n        The routing mode. Can be either \"driving\" or \"walking\".\n\n    - `timeout` : int\n        The timeout in seconds for API requests.\n\n    - `language` : str\n        The language to be used in API requests.\n\n    Returns\n    -------\n    - `GoogleRouter`:\n        A router object that can be used to get routes and distance matrices.\n\n    \"\"\"\n\n    def __init__(self, api_key, mode=\"driving\", timeout=10, language=\"en\"):\n        \"\"\"\n        This is the constructor method for the GoogleRouter class.\n        It initializes the class by calling the super() method and setting up\n        the Client object of the Google Maps API using the provided api_key.\n        The mode parameter sets the routing mode, which can be either \"driving\" or \"walking\".\n        The timeout parameter sets the timeout in seconds for API requests, and the language\n        parameter sets the language to be used in API requests.\n        \"\"\"\n        super().__init__(api_key, mode=mode)\n        self.client = googlemaps.Client(key=self.api_key)\n\n    def _get_directions_request(self, origin, destination):\n        \"\"\"\n        This method is a helper method for sending a directions request to the Google Maps API.\n        It takes two parameters, origin and destination, which represent the starting and ending\n        points for the route.\n        \"\"\"\n        return self.client.directions(origin, destination, self.mode)\n\n    def _get_distance_matrix_request(self, origins, destinations):\n        \"\"\"\n        This method is a helper method for sending a distance matrix request to the Google Maps API.\n        It takes two parameters, origins and destinations, which represent the starting and ending\n        points for each pair of routes in the matrix.\n        \"\"\"\n        return self.client.distance_matrix(origins, destinations, self.mode)\n\n    def _parse_distance_matrix(self, json_data):\n        \"\"\"\n        This method is a helper method for parsing the JSON data returned from the Google Maps API\n        in response to a distance matrix request. It takes one parameter, json_data, which is the\n        raw JSON data. The method returns a Pandas dataframe containing the distances and durations\n        for each pair of routes.\n        \"\"\"\n\n        results = []\n        for element in json_data[\"rows\"]:\n            # print(element)\n            # print(element['elements'])\n            for i in element[\"elements\"]:\n                temp = {}\n                temp[\"distance (m)\"] = i[\"distance\"][\"value\"]\n                temp[\"duration (s)\"] = i[\"duration\"][\"value\"]\n                results.append(temp)\n        df = pd.DataFrame(results)\n\n        return df\n\n    def get_route(self, origin, destination):\n        \"\"\"\n        This method returns a Route object representing the route between the origin and destination points.\n        The origin and destination parameters are tuples/list/arrays representing the starting and ending points for the route.\n        The orgin and destination parameters should be in the form of iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude].\n\n        Parameters\n        ----------\n        - `origin` : iterable objects\n            The origin point. Iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude]\n\n        - `destination` : iterable objects\n            The destination point. Iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude]\n\n        Returns\n        -------\n        `route` : Route object\n            The route between the origin and destination.\n\n        The returned Route object has the following functions:\n\n        - `get_distance()` returns the distance of the route in meters.\n        - `get_duration()` returns the duration of the route in seconds.\n        - `get_route()` returns the raw route data returned as a dictionary.\n        - `get_route_geodataframe()` returns the route as a GeoDataFrame.\n        \"\"\"\n\n        route = self._get_directions_request(origin, destination)\n        route = Route(GoogleRoute(route), origin, destination)\n\n        return route\n\n    def get_distance_matrix(self, origins, destinations, append_od=False):\n        \"\"\"\n        This method returns a Pandas dataframe representing a distance matrix between the `origins` and `destinations` points. It returns the duration and distance for\n        all possible combinations between each origin and each destination. If you want just\n        return the duration and distance for specific origin-destination pairs, use the `get_distances_batch` method.\n\n        The origins and destinations parameters are lists of origins and destinations.\n\n        If the `append_od` parameter is set to True, the method also returns a matrix of origin-destination pairs.\n\n        Google Maps API has following limitations for distance matrix requests:\n        the following usage limits are in place for the Distance Matrix API, for more information,\n        see in [google maps api documentation](https://developers.google.com/maps/documentation/distance-matrix/usage-limits):\n\n        - Maximum of 25 origins or 25 destinations per request.\n        - Maximum 100 elements per server-side request.\n        - Maximum 100 elements per client-side request.\n        - 1000 elements per second (EPS), calculated as the sum of client-side and server-side queries.\n\n        Parameters\n        ----------\n        - `origins` : iterable objects\n            An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `destinations` : iterable objects\n            An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `append_od` : bool\n            If True, the method also returns a matrix of origin-destination pairs.\n\n        Returns\n        -------\n        - `distance_matrix` : pandas.DataFrame\n            A pandas DataFrame containing the distance matrix.\n\n        Here is an example of how to use this method:\n        # TODO: add example\n\n        \"\"\"\n\n        # Check if the origins and destinations parameters are lists\n        # if ther are numpy arrays, convert them to lists\n        origins = gtl.convert_to_list(origins)\n        destinations = gtl.convert_to_list(destinations)\n\n        res = self._get_distance_matrix_request(origins, destinations)\n        df = self._parse_distance_matrix(res)\n        if append_od:\n            od_matrix = super()._get_OD_matrix(origins, destinations)\n            df = pd.concat([od_matrix, df], axis=1)\n        return df\n\n    def get_distances_batch(self, origins, destinations, append_od=False):\n        \"\"\"\n        This method returns a Pandas dataframe contains duration and disatnce for all the `origins` and `destinations` pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.\n\n        The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.\n\n        If the `append_od` parameter is set to True, the method also returns the input origin-destination pairs.\n\n        Parameters\n        ----------\n        - `origins` : iterable objects\n            An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `destinations` : iterable objects\n            An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `append_od` : bool\n            If True, the method also returns the input origin-destination pairs.\n\n        Returns\n        -------\n        - `distance_matrix` : pandas.DataFrame\n            A pandas DataFrame containing the distance matrix.\n\n        \"\"\"\n        return super().get_distances_batch(\n            origins, destinations, max_batch_size=25, append_od=append_od\n        )\n</code></pre>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.__init__","title":"<code>__init__(self, api_key, mode='driving', timeout=10, language='en')</code>  <code>special</code>","text":"<p>This is the constructor method for the GoogleRouter class. It initializes the class by calling the super() method and setting up the Client object of the Google Maps API using the provided api_key. The mode parameter sets the routing mode, which can be either \"driving\" or \"walking\". The timeout parameter sets the timeout in seconds for API requests, and the language parameter sets the language to be used in API requests.</p> Source code in <code>georouting/routers/google.py</code> <pre><code>def __init__(self, api_key, mode=\"driving\", timeout=10, language=\"en\"):\n    \"\"\"\n    This is the constructor method for the GoogleRouter class.\n    It initializes the class by calling the super() method and setting up\n    the Client object of the Google Maps API using the provided api_key.\n    The mode parameter sets the routing mode, which can be either \"driving\" or \"walking\".\n    The timeout parameter sets the timeout in seconds for API requests, and the language\n    parameter sets the language to be used in API requests.\n    \"\"\"\n    super().__init__(api_key, mode=mode)\n    self.client = googlemaps.Client(key=self.api_key)\n</code></pre>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distance_matrix","title":"<code>get_distance_matrix(self, origins, destinations, append_od=False)</code>","text":"<p>This method returns a Pandas dataframe representing a distance matrix between the <code>origins</code> and <code>destinations</code> points. It returns the duration and distance for all possible combinations between each origin and each destination. If you want just return the duration and distance for specific origin-destination pairs, use the <code>get_distances_batch</code> method.</p> <p>The origins and destinations parameters are lists of origins and destinations.</p> <p>If the <code>append_od</code> parameter is set to True, the method also returns a matrix of origin-destination pairs.</p> <p>Google Maps API has following limitations for distance matrix requests: the following usage limits are in place for the Distance Matrix API, for more information, see in google maps api documentation:</p> <ul> <li>Maximum of 25 origins or 25 destinations per request.</li> <li>Maximum 100 elements per server-side request.</li> <li>Maximum 100 elements per client-side request.</li> <li>1000 elements per second (EPS), calculated as the sum of client-side and server-side queries.</li> </ul>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distance_matrix--parameters","title":"Parameters","text":"<ul> <li> <p><code>origins</code> : iterable objects     An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>destinations</code> : iterable objects     An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>append_od</code> : bool     If True, the method also returns a matrix of origin-destination pairs.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distance_matrix--returns","title":"Returns","text":"<ul> <li><code>distance_matrix</code> : pandas.DataFrame     A pandas DataFrame containing the distance matrix.</li> </ul> <p>Here is an example of how to use this method:</p>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distance_matrix--todo-add-example","title":"TODO: add example","text":"Source code in <code>georouting/routers/google.py</code> <pre><code>def get_distance_matrix(self, origins, destinations, append_od=False):\n    \"\"\"\n    This method returns a Pandas dataframe representing a distance matrix between the `origins` and `destinations` points. It returns the duration and distance for\n    all possible combinations between each origin and each destination. If you want just\n    return the duration and distance for specific origin-destination pairs, use the `get_distances_batch` method.\n\n    The origins and destinations parameters are lists of origins and destinations.\n\n    If the `append_od` parameter is set to True, the method also returns a matrix of origin-destination pairs.\n\n    Google Maps API has following limitations for distance matrix requests:\n    the following usage limits are in place for the Distance Matrix API, for more information,\n    see in [google maps api documentation](https://developers.google.com/maps/documentation/distance-matrix/usage-limits):\n\n    - Maximum of 25 origins or 25 destinations per request.\n    - Maximum 100 elements per server-side request.\n    - Maximum 100 elements per client-side request.\n    - 1000 elements per second (EPS), calculated as the sum of client-side and server-side queries.\n\n    Parameters\n    ----------\n    - `origins` : iterable objects\n        An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `destinations` : iterable objects\n        An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `append_od` : bool\n        If True, the method also returns a matrix of origin-destination pairs.\n\n    Returns\n    -------\n    - `distance_matrix` : pandas.DataFrame\n        A pandas DataFrame containing the distance matrix.\n\n    Here is an example of how to use this method:\n    # TODO: add example\n\n    \"\"\"\n\n    # Check if the origins and destinations parameters are lists\n    # if ther are numpy arrays, convert them to lists\n    origins = gtl.convert_to_list(origins)\n    destinations = gtl.convert_to_list(destinations)\n\n    res = self._get_distance_matrix_request(origins, destinations)\n    df = self._parse_distance_matrix(res)\n    if append_od:\n        od_matrix = super()._get_OD_matrix(origins, destinations)\n        df = pd.concat([od_matrix, df], axis=1)\n    return df\n</code></pre>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distances_batch","title":"<code>get_distances_batch(self, origins, destinations, append_od=False)</code>","text":"<p>This method returns a Pandas dataframe contains duration and disatnce for all the <code>origins</code> and <code>destinations</code> pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.</p> <p>The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.</p> <p>If the <code>append_od</code> parameter is set to True, the method also returns the input origin-destination pairs.</p>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distances_batch--parameters","title":"Parameters","text":"<ul> <li> <p><code>origins</code> : iterable objects     An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>destinations</code> : iterable objects     An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>append_od</code> : bool     If True, the method also returns the input origin-destination pairs.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_distances_batch--returns","title":"Returns","text":"<ul> <li><code>distance_matrix</code> : pandas.DataFrame     A pandas DataFrame containing the distance matrix.</li> </ul> Source code in <code>georouting/routers/google.py</code> <pre><code>def get_distances_batch(self, origins, destinations, append_od=False):\n    \"\"\"\n    This method returns a Pandas dataframe contains duration and disatnce for all the `origins` and `destinations` pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.\n\n    The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.\n\n    If the `append_od` parameter is set to True, the method also returns the input origin-destination pairs.\n\n    Parameters\n    ----------\n    - `origins` : iterable objects\n        An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `destinations` : iterable objects\n        An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `append_od` : bool\n        If True, the method also returns the input origin-destination pairs.\n\n    Returns\n    -------\n    - `distance_matrix` : pandas.DataFrame\n        A pandas DataFrame containing the distance matrix.\n\n    \"\"\"\n    return super().get_distances_batch(\n        origins, destinations, max_batch_size=25, append_od=append_od\n    )\n</code></pre>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_route","title":"<code>get_route(self, origin, destination)</code>","text":"<p>This method returns a Route object representing the route between the origin and destination points. The origin and destination parameters are tuples/list/arrays representing the starting and ending points for the route. The orgin and destination parameters should be in the form of iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude].</p>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_route--parameters","title":"Parameters","text":"<ul> <li> <p><code>origin</code> : iterable objects     The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]</p> </li> <li> <p><code>destination</code> : iterable objects     The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]</p> </li> </ul>"},{"location":"georouting/#georouting.routers.google.GoogleRouter.get_route--returns","title":"Returns","text":"<p><code>route</code> : Route object     The route between the origin and destination.</p> <p>The returned Route object has the following functions:</p> <ul> <li><code>get_distance()</code> returns the distance of the route in meters.</li> <li><code>get_duration()</code> returns the duration of the route in seconds.</li> <li><code>get_route()</code> returns the raw route data returned as a dictionary.</li> <li><code>get_route_geodataframe()</code> returns the route as a GeoDataFrame.</li> </ul> Source code in <code>georouting/routers/google.py</code> <pre><code>def get_route(self, origin, destination):\n    \"\"\"\n    This method returns a Route object representing the route between the origin and destination points.\n    The origin and destination parameters are tuples/list/arrays representing the starting and ending points for the route.\n    The orgin and destination parameters should be in the form of iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude].\n\n    Parameters\n    ----------\n    - `origin` : iterable objects\n        The origin point. Iterable objects with two elements, such as\n    (latitude, longitude) or [latitude, longitude]\n\n    - `destination` : iterable objects\n        The destination point. Iterable objects with two elements, such as\n    (latitude, longitude) or [latitude, longitude]\n\n    Returns\n    -------\n    `route` : Route object\n        The route between the origin and destination.\n\n    The returned Route object has the following functions:\n\n    - `get_distance()` returns the distance of the route in meters.\n    - `get_duration()` returns the duration of the route in seconds.\n    - `get_route()` returns the raw route data returned as a dictionary.\n    - `get_route_geodataframe()` returns the route as a GeoDataFrame.\n    \"\"\"\n\n    route = self._get_directions_request(origin, destination)\n    route = Route(GoogleRoute(route), origin, destination)\n\n    return route\n</code></pre>"},{"location":"georouting/#osrmrouter","title":"OSRMRouter","text":"<p>OSRM router. The OSRMRouter class is a subclass of the WebRouter class and is used for routing using the OSRM API. This class is designed to provide a convenient and easy-to-use interface for interacting with the OSRM API.</p> <p>It will return a router object that can be used to get routes and distance matrices.</p>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter--parameters","title":"Parameters","text":"<ul> <li> <p><code>mode</code> : str     The routing mode. Can be either \"driving\" or \"walking\". Default is \"driving\".</p> </li> <li> <p><code>timeout</code> : int     The timeout in seconds for API requests. Default is 10.</p> </li> <li> <p><code>language</code> : str     The language to be used in API requests. Default is \"en\".</p> </li> <li> <p><code>base_url</code> : str     The base URL for the OSRM API. Default is \"http://router.project-osrm.org\".</p> </li> </ul>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter--returns","title":"Returns","text":"<ul> <li><code>OSRMRouter</code>:     A router object that can be used to get routes and distance matrices.</li> </ul> Source code in <code>georouting/routers/osrm.py</code> <pre><code>class OSRMRouter(WebRouter):\n    \"\"\"\n    OSRM router.\n    The OSRMRouter class is a subclass of the WebRouter class and is used for routing using the OSRM API.\n    This class is designed to provide a convenient and easy-to-use interface for interacting with the OSRM API.\n\n    It will return a router object that can be used to get routes and distance matrices.\n\n    Parameters\n    ----------\n    - `mode` : str\n        The routing mode. Can be either \"driving\" or \"walking\". Default is \"driving\".\n\n    - `timeout` : int\n        The timeout in seconds for API requests. Default is 10.\n\n    - `language` : str\n        The language to be used in API requests. Default is \"en\".\n\n    - `base_url` : str\n        The base URL for the OSRM API. Default is \"http://router.project-osrm.org\".\n\n    Returns\n    -------\n    - `OSRMRouter`:\n        A router object that can be used to get routes and distance matrices.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        mode=\"driving\",\n        timeout=10,\n        language=\"en\",\n        base_url=\"http://router.project-osrm.org\",\n    ):\n        super().__init__(\n            api_key=None, mode=mode, timeout=timeout, language=language, base_url=None\n        )\n        # nned let user reset the base_url\n        self.base_url = base_url\n\n    def _get_directions_url(self, origin, destination):\n        \"\"\"\n        Helper function for getting the URL for a directions request (To request a route\n        between the given origin and destination coordinates).\n        \"\"\"\n        return (\n            \"%s/route/v1/%s/%f,%f;%f,%f?steps=true&amp;annotations=true&amp;geometries=geojson\"\n            % (\n                self.base_url,\n                self.mode,\n                origin[1],\n                origin[0],\n                destination[1],\n                destination[0],\n            )\n        )\n\n    def _get_matrix_distance_url(self, origins, destinations):\n        \"\"\"\n        Helper function for getting the URL for a distance matrix request.\n        Generates the URL to request a distance matrix between the given lists of\n        origins and destinations coordinates.\n        \"\"\"\n\n        # get the need cal location\n        s = (\n            str(list(range(len(origins))))\n            .replace(\",\", \";\")\n            .replace(\"[\", \"\")\n            .replace(\"]\", \"\")\n            .replace(\" \", \"\")\n        )\n        d = (\n            str(list(range(len(origins), len(origins) + len(destinations))))\n            .replace(\",\", \";\")\n            .replace(\"[\", \"\")\n            .replace(\"]\", \"\")\n            .replace(\" \", \"\")\n        )\n\n        origins = [str(item[1]) + \",\" + str(item[0]) for item in origins]\n        destinations = [str(item[1]) + \",\" + str(item[0]) for item in destinations]\n        origins = \";\".join(origins)\n        destinations = \";\".join(destinations)\n\n        url = (\n            \"%s/table/v1/%s/%s;%s?sources=%s&amp;destinations=%s&amp;annotations=duration,distance\"\n            % (self.base_url, self.mode, origins, destinations, s, d)\n        )\n        return url\n\n    def _parse_distance_matrix(self, json_data):\n        \"\"\"\n        Helper function for parsing the distance matrix response.\n        Parses the response from the distance matrix API and returns a dataframe of\n        durations and distances.\n        \"\"\"\n        durations = json_data[\"durations\"]\n        distances = json_data[\"distances\"]\n\n        # flatten the list\n        durations = [item for sublist in durations for item in sublist]\n        distances = [item for sublist in distances for item in sublist]\n\n        # combine the dutation and destinations list to a dataframe\n        # print(len(durations), len(distances))\n        df = pd.DataFrame({\"distance (m)\": distances, \"duration (s)\": durations})\n\n        return df\n\n    def get_route(self, origin, destination):\n        \"\"\"\n        This method returns a Route object contains duration and disatnce for the route between the given origin and destination coordinates.\n        The origin and destination parameters are lists of latitude and longitude coordinates.\n        The orgin and destination parameters should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n        Parameters\n        ----------\n        - `origin` : iterable objects\n            The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n        - `destination` : iterable objects\n            The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n        Returns\n        -------\n        - `route` : Route object\n            The route between the origin and destination.\n\n        The returned Route object has the following functions:\n\n        - `get_distance()` returns the distance of the route in meters.\n        - `get_duration()` returns the duration of the route in seconds.\n        - `get_route()` returns the raw route data returned as a dictionary.\n        - `get_route_geodataframe()` returns the route as a GeoDataFrame.\n\n        \"\"\"\n        url = self._get_directions_url(origin, destination)\n        route = super()._get_request(url)\n        route = Route(OSRMRoute(route), origin, destination)\n        return route\n\n    def get_distance_matrix(self, origins, destinations, append_od=False):\n        \"\"\"\n        This method returns a Pandas dataframe representing a distance matrix between the `origins` and `destinations` points. It returns the duration and distance for\n        all possible combinations between each origin and each destination. If you want just\n        return the duration and distance for specific origin-destination pairs, use the `get_distances_batch` method.\n\n        The origins and destinations parameters are lists of origins and destinations.\n\n        If the `append_od` parameter is set to True, the method also returns a matrix of origin-destination pairs.\n\n        Parameters\n        ----------\n        - `origins` : iterable objects\n            An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `destinations` : iterable objects\n            An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `append_od` : bool\n            If True, the method also returns a matrix of origin-destination pairs.\n\n        Returns\n        -------\n        - `distance_matrix` : pandas.DataFrame\n            A pandas DataFrame containing the distance matrix.\n\n        Here is an example of how to use this method:\n        # TODO: add example\n        \"\"\"\n        # check if the origins and destinations are numpy arrays\n        # if so, convert them to lists\n\n        origins = gtl.convert_to_list(origins)\n        destinations = gtl.convert_to_list(destinations)\n\n        url = self._get_matrix_distance_url(origins, destinations)\n        res = super()._get_request(url)\n        distance_matrix = self._parse_distance_matrix(res)\n        if append_od:\n            od_matrix = super()._get_OD_matrix(origins, destinations)\n            distance_matrix = pd.concat([od_matrix, distance_matrix], axis=1)\n\n        return distance_matrix\n\n    def get_distances_batch(\n        self, origins, destinations, append_od=False, use_local_server=False\n    ):\n        \"\"\"\n        This method returns a Pandas dataframe contains duration and disatnce for all the `origins` and `destinations` pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.\n\n        The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.\n\n        If the `append_od` parameter is set to True, the method also returns the input origin-destination pairs.\n\n        Parameters\n        ----------\n        - `origins` : iterable objects\n            An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `destinations` : iterable objects\n            An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `append_od` : bool\n            If True, the method also returns the input origin-destination pairs.\n\n        Returns\n        -------\n        - `distance_matrix` : pandas.DataFrame\n            A pandas DataFrame containing the distance matrix.\n\n        \"\"\"\n        if use_local_server:\n            df = super().get_distances_batch(\n                origins, destinations, max_batch_size=np.infty, append_od=append_od\n            )\n        else:\n            df = super().get_distances_batch(\n                origins, destinations, max_batch_size=100, append_od=append_od\n            )\n        return df\n</code></pre>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distance_matrix","title":"<code>get_distance_matrix(self, origins, destinations, append_od=False)</code>","text":"<p>This method returns a Pandas dataframe representing a distance matrix between the <code>origins</code> and <code>destinations</code> points. It returns the duration and distance for all possible combinations between each origin and each destination. If you want just return the duration and distance for specific origin-destination pairs, use the <code>get_distances_batch</code> method.</p> <p>The origins and destinations parameters are lists of origins and destinations.</p> <p>If the <code>append_od</code> parameter is set to True, the method also returns a matrix of origin-destination pairs.</p>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distance_matrix--parameters","title":"Parameters","text":"<ul> <li> <p><code>origins</code> : iterable objects     An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>destinations</code> : iterable objects     An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>append_od</code> : bool     If True, the method also returns a matrix of origin-destination pairs.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distance_matrix--returns","title":"Returns","text":"<ul> <li><code>distance_matrix</code> : pandas.DataFrame     A pandas DataFrame containing the distance matrix.</li> </ul> <p>Here is an example of how to use this method:</p>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distance_matrix--todo-add-example","title":"TODO: add example","text":"Source code in <code>georouting/routers/osrm.py</code> <pre><code>def get_distance_matrix(self, origins, destinations, append_od=False):\n    \"\"\"\n    This method returns a Pandas dataframe representing a distance matrix between the `origins` and `destinations` points. It returns the duration and distance for\n    all possible combinations between each origin and each destination. If you want just\n    return the duration and distance for specific origin-destination pairs, use the `get_distances_batch` method.\n\n    The origins and destinations parameters are lists of origins and destinations.\n\n    If the `append_od` parameter is set to True, the method also returns a matrix of origin-destination pairs.\n\n    Parameters\n    ----------\n    - `origins` : iterable objects\n        An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `destinations` : iterable objects\n        An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `append_od` : bool\n        If True, the method also returns a matrix of origin-destination pairs.\n\n    Returns\n    -------\n    - `distance_matrix` : pandas.DataFrame\n        A pandas DataFrame containing the distance matrix.\n\n    Here is an example of how to use this method:\n    # TODO: add example\n    \"\"\"\n    # check if the origins and destinations are numpy arrays\n    # if so, convert them to lists\n\n    origins = gtl.convert_to_list(origins)\n    destinations = gtl.convert_to_list(destinations)\n\n    url = self._get_matrix_distance_url(origins, destinations)\n    res = super()._get_request(url)\n    distance_matrix = self._parse_distance_matrix(res)\n    if append_od:\n        od_matrix = super()._get_OD_matrix(origins, destinations)\n        distance_matrix = pd.concat([od_matrix, distance_matrix], axis=1)\n\n    return distance_matrix\n</code></pre>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distances_batch","title":"<code>get_distances_batch(self, origins, destinations, append_od=False, use_local_server=False)</code>","text":"<p>This method returns a Pandas dataframe contains duration and disatnce for all the <code>origins</code> and <code>destinations</code> pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.</p> <p>The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.</p> <p>If the <code>append_od</code> parameter is set to True, the method also returns the input origin-destination pairs.</p>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distances_batch--parameters","title":"Parameters","text":"<ul> <li> <p><code>origins</code> : iterable objects     An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>destinations</code> : iterable objects     An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>append_od</code> : bool     If True, the method also returns the input origin-destination pairs.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_distances_batch--returns","title":"Returns","text":"<ul> <li><code>distance_matrix</code> : pandas.DataFrame     A pandas DataFrame containing the distance matrix.</li> </ul> Source code in <code>georouting/routers/osrm.py</code> <pre><code>def get_distances_batch(\n    self, origins, destinations, append_od=False, use_local_server=False\n):\n    \"\"\"\n    This method returns a Pandas dataframe contains duration and disatnce for all the `origins` and `destinations` pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.\n\n    The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.\n\n    If the `append_od` parameter is set to True, the method also returns the input origin-destination pairs.\n\n    Parameters\n    ----------\n    - `origins` : iterable objects\n        An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `destinations` : iterable objects\n        An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `append_od` : bool\n        If True, the method also returns the input origin-destination pairs.\n\n    Returns\n    -------\n    - `distance_matrix` : pandas.DataFrame\n        A pandas DataFrame containing the distance matrix.\n\n    \"\"\"\n    if use_local_server:\n        df = super().get_distances_batch(\n            origins, destinations, max_batch_size=np.infty, append_od=append_od\n        )\n    else:\n        df = super().get_distances_batch(\n            origins, destinations, max_batch_size=100, append_od=append_od\n        )\n    return df\n</code></pre>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_route","title":"<code>get_route(self, origin, destination)</code>","text":"<p>This method returns a Route object contains duration and disatnce for the route between the given origin and destination coordinates. The origin and destination parameters are lists of latitude and longitude coordinates. The orgin and destination parameters should be in the form of iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude].</p>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_route--parameters","title":"Parameters","text":"<ul> <li> <p><code>origin</code> : iterable objects     The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]</p> </li> <li> <p><code>destination</code> : iterable objects     The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]</p> </li> </ul>"},{"location":"georouting/#georouting.routers.osrm.OSRMRouter.get_route--returns","title":"Returns","text":"<ul> <li><code>route</code> : Route object     The route between the origin and destination.</li> </ul> <p>The returned Route object has the following functions:</p> <ul> <li><code>get_distance()</code> returns the distance of the route in meters.</li> <li><code>get_duration()</code> returns the duration of the route in seconds.</li> <li><code>get_route()</code> returns the raw route data returned as a dictionary.</li> <li><code>get_route_geodataframe()</code> returns the route as a GeoDataFrame.</li> </ul> Source code in <code>georouting/routers/osrm.py</code> <pre><code>def get_route(self, origin, destination):\n    \"\"\"\n    This method returns a Route object contains duration and disatnce for the route between the given origin and destination coordinates.\n    The origin and destination parameters are lists of latitude and longitude coordinates.\n    The orgin and destination parameters should be in the form of iterable objects with two elements, such as\n    (latitude, longitude) or [latitude, longitude].\n\n    Parameters\n    ----------\n    - `origin` : iterable objects\n        The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n    - `destination` : iterable objects\n        The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n    Returns\n    -------\n    - `route` : Route object\n        The route between the origin and destination.\n\n    The returned Route object has the following functions:\n\n    - `get_distance()` returns the distance of the route in meters.\n    - `get_duration()` returns the duration of the route in seconds.\n    - `get_route()` returns the raw route data returned as a dictionary.\n    - `get_route_geodataframe()` returns the route as a GeoDataFrame.\n\n    \"\"\"\n    url = self._get_directions_url(origin, destination)\n    route = super()._get_request(url)\n    route = Route(OSRMRoute(route), origin, destination)\n    return route\n</code></pre>"},{"location":"georouting/#bingrouter","title":"BingRouter","text":"<p>Bing Maps router. The BingRouter class is a subclass of the WebRouter class and is used for routing using the Bing Maps API. This class is designed to provide a convenient and easy-to-use interface for interacting with the Bing Maps API.</p> <p>It will return a router object that can be used to get routes and distance matrices.</p>"},{"location":"georouting/#georouting.routers.bing.BingRouter--parameters","title":"Parameters","text":"<ul> <li> <p><code>api_key</code> : str     The API key for the Bing Maps API.</p> </li> <li> <p><code>mode</code> : str     The routing mode. Can be either \"driving\" or \"walking\".</p> </li> <li> <p><code>timeout</code> : int     The timeout in seconds for API requests.</p> </li> <li> <p><code>language</code> : str     The language to be used in API requests.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.bing.BingRouter--returns","title":"Returns","text":"<ul> <li><code>BingRouter</code> :     A router object that can be used to get routes and distance matrices.</li> </ul> Source code in <code>georouting/routers/bing.py</code> <pre><code>class BingRouter(WebRouter):\n    \"\"\"\n    Bing Maps router.\n    The BingRouter class is a subclass of the WebRouter class and is used for routing using the Bing Maps API.\n    This class is designed to provide a convenient and easy-to-use interface for interacting with the Bing Maps API.\n\n    It will return a router object that can be used to get routes and distance matrices.\n\n    Parameters\n    ----------\n\n    - `api_key` : str\n        The API key for the Bing Maps API.\n\n    - `mode` : str\n        The routing mode. Can be either \"driving\" or \"walking\".\n\n    - `timeout` : int\n        The timeout in seconds for API requests.\n\n    - `language` : str\n        The language to be used in API requests.\n\n\n    Returns\n    -------\n    - `BingRouter` :\n        A router object that can be used to get routes and distance matrices.\n\n    \"\"\"\n\n    def __init__(self, api_key, mode=\"driving\", timeout=10, language=\"en\"):\n        super().__init__(api_key, mode=mode, timeout=timeout, language=language)\n        self.base_url = \"https://dev.virtualearth.net/REST/v1/Routes/\"\n\n    def _get_directions_url(self, origin, destination):\n        \"\"\"\n        Helper function for getting the URL for a directions request.\n        \"\"\"\n\n        return \"%s%s?wp.0=%f,%f&amp;wp.1=%f,%f&amp;routeAttributes=routePath&amp;key=%s\" % (\n            self.base_url,\n            self.mode,\n            origin[0],\n            origin[1],\n            destination[0],\n            destination[1],\n            self.api_key,\n        )\n\n    def _get_matrix_distance_url(self, origins, destinations):\n        \"\"\"\n        Helper function for getting the URL for a distance matrix request.\n        \"\"\"\n\n        origins = [str(item[0]) + \",\" + str(item[1]) for item in origins]\n        destinations = [str(item[0]) + \",\" + str(item[1]) for item in destinations]\n        origins = \";\".join(origins)\n        destinations = \";\".join(destinations)\n        return (\n            \"%sDistanceMatrix?origins=%s&amp;destinations=%s&amp;travelMode=%s&amp;timeUnit=second&amp;distanceUnit=kilometer&amp;key=%s\"\n            % (self.base_url, origins, destinations, self.mode, self.api_key)\n        )\n\n    def _parse_distance_matrix(self, json_data):\n        \"\"\"\n        Helper function for parsing the response from a distance matrix request.\n        \"\"\"\n\n        df = pd.DataFrame(json_data[\"resourceSets\"][0][\"resources\"][0][\"results\"])\n        df = df[[\"travelDistance\", \"travelDuration\"]]\n        # convert from kilometers to meters\n        df[\"travelDistance\"] = df[\"travelDistance\"] * 1000\n        df.columns = [\"distance (m)\", \"duration (s)\"]\n        return df\n\n    def get_route(self, origin, destination):\n        \"\"\"\n        This method returns a Route object representing the route between the origin and destination points.\n        The origin and destination parameters are tuples/list/arrays representing the starting and ending points for the route.\n        The orgin and destination parameters should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n        Parameters\n        ----------\n        - `origin` : iterable objects\n            The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n        - `destination` : iterable objects\n            The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n        Returns\n        -------\n        - `route` : Route object\n            The route between the origin and destination.\n\n        The returned Route object has the following functions:\n\n        - `get_distance()` returns the distance of the route in meters.\n        - `get_duration()` returns the duration of the route in seconds.\n        - `get_route()` returns the raw route data returned as a dictionary.\n        - `get_route_geodataframe()` returns the route as a GeoDataFrame.\n\n        \"\"\"\n\n        url = self._get_directions_url(origin, destination)\n        route = super()._get_request(url)\n        route = Route(BingRoute(route), origin, destination)\n        return route\n\n    def get_distance_matrix(self, origins, destinations, append_od=False):\n        \"\"\"\n        This method returns a Pandas dataframe representing a distance matrix between the `origins` and `destinations` points. It returns the duration and distance for\n        all possible combinations between each origin and each destination. If you want just\n        return the duration and distance for specific origin-destination pairs, use the `get_distances_batch` method.\n\n        The origins and destinations parameters are lists of origins and destinations.\n\n        If the `append_od` parameter is set to True, the method also returns a matrix of origin-destination pairs.\n\n        The Bing Maps API has the following limitations for distance matrix requests,\n        for more information see [here](https://learn.microsoft.com/en-us/bingmaps/rest-services/routes/calculate-a-distance-matrix#api-limits):\n\n        - For travel mode driving a distance matrix that has up to 2,500 origins-destinations pairs can be requested for Basic Bing Maps accounts,\n        - while for Enterprise Bing Maps accounts the origin-destination pairs limit is 10,000.\n        - For travel mode transit and walking, a distance matrix that has up to 650 origins-destinations pairs can be request for all Bing Maps account types.\n\n        Pairs are calculated by multiplying the number of origins, by the number of destinations.\n        For example 10,000 origin-destination pairs can be reached if you have: 1 origin, and 10,000 destinations,\n        or 100 origins and 100 destinations defined in your request.\n\n\n        Parameters\n        ----------\n        - `origins` : iterable objects\n            An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n        - `destinations` : iterable objects\n            An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n        - `append_od` : bool\n            If True, the method also returns a matrix of origin-destination pairs.\n\n        Returns\n        -------\n        - `distance_matrix` : pandas.DataFrame\n            A pandas DataFrame containing the distance matrix.\n        \"\"\"\n\n        # check if the origins and destinations is numpy array\n        # if so, convert it to list\n        origins = gtl.convert_to_list(origins)\n        destinations = gtl.convert_to_list(destinations)\n\n        url = self._get_matrix_distance_url(origins, destinations)\n        res = super()._get_request(url)\n        distance_matrix = self._parse_distance_matrix(res)\n        if append_od:\n            od_matrix = super()._get_OD_matrix(origins, destinations)\n            distance_matrix = pd.concat([od_matrix, distance_matrix], axis=1)\n\n        return distance_matrix\n\n    def get_distances_batch(self, origins, destinations, append_od=False):\n        \"\"\"\n        This method returns a Pandas dataframe contains duration and disatnce for all the `origins` and `destinations` pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.\n\n        The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.\n\n        If the `append_od` parameter is set to True, the method also returns the input origin-destination pairs.\n\n        Parameters\n        ----------\n        - `origins` : iterable objects\n            An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `destinations` : iterable objects\n            An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n            It should be in the form of iterable objects with two elements, such as\n            (latitude, longitude) or [latitude, longitude].\n\n        - `append_od` : bool\n            If True, the method also returns the input origin-destination pairs.\n\n        Returns\n        -------\n        - `distance_matrix` : pandas.DataFrame\n            A pandas DataFrame containing the distance matrix.\n\n        \"\"\"\n        return super().get_distances_batch(\n            origins, destinations, max_batch_size=650, append_od=append_od\n        )\n</code></pre>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_distance_matrix","title":"<code>get_distance_matrix(self, origins, destinations, append_od=False)</code>","text":"<p>This method returns a Pandas dataframe representing a distance matrix between the <code>origins</code> and <code>destinations</code> points. It returns the duration and distance for all possible combinations between each origin and each destination. If you want just return the duration and distance for specific origin-destination pairs, use the <code>get_distances_batch</code> method.</p> <p>The origins and destinations parameters are lists of origins and destinations.</p> <p>If the <code>append_od</code> parameter is set to True, the method also returns a matrix of origin-destination pairs.</p> <p>The Bing Maps API has the following limitations for distance matrix requests, for more information see here:</p> <ul> <li>For travel mode driving a distance matrix that has up to 2,500 origins-destinations pairs can be requested for Basic Bing Maps accounts,</li> <li>while for Enterprise Bing Maps accounts the origin-destination pairs limit is 10,000.</li> <li>For travel mode transit and walking, a distance matrix that has up to 650 origins-destinations pairs can be request for all Bing Maps account types.</li> </ul> <p>Pairs are calculated by multiplying the number of origins, by the number of destinations. For example 10,000 origin-destination pairs can be reached if you have: 1 origin, and 10,000 destinations, or 100 origins and 100 destinations defined in your request.</p>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_distance_matrix--parameters","title":"Parameters","text":"<ul> <li><code>origins</code> : iterable objects     An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</li> <li><code>destinations</code> : iterable objects     An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</li> <li><code>append_od</code> : bool     If True, the method also returns a matrix of origin-destination pairs.</li> </ul>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_distance_matrix--returns","title":"Returns","text":"<ul> <li><code>distance_matrix</code> : pandas.DataFrame     A pandas DataFrame containing the distance matrix.</li> </ul> Source code in <code>georouting/routers/bing.py</code> <pre><code>def get_distance_matrix(self, origins, destinations, append_od=False):\n    \"\"\"\n    This method returns a Pandas dataframe representing a distance matrix between the `origins` and `destinations` points. It returns the duration and distance for\n    all possible combinations between each origin and each destination. If you want just\n    return the duration and distance for specific origin-destination pairs, use the `get_distances_batch` method.\n\n    The origins and destinations parameters are lists of origins and destinations.\n\n    If the `append_od` parameter is set to True, the method also returns a matrix of origin-destination pairs.\n\n    The Bing Maps API has the following limitations for distance matrix requests,\n    for more information see [here](https://learn.microsoft.com/en-us/bingmaps/rest-services/routes/calculate-a-distance-matrix#api-limits):\n\n    - For travel mode driving a distance matrix that has up to 2,500 origins-destinations pairs can be requested for Basic Bing Maps accounts,\n    - while for Enterprise Bing Maps accounts the origin-destination pairs limit is 10,000.\n    - For travel mode transit and walking, a distance matrix that has up to 650 origins-destinations pairs can be request for all Bing Maps account types.\n\n    Pairs are calculated by multiplying the number of origins, by the number of destinations.\n    For example 10,000 origin-destination pairs can be reached if you have: 1 origin, and 10,000 destinations,\n    or 100 origins and 100 destinations defined in your request.\n\n\n    Parameters\n    ----------\n    - `origins` : iterable objects\n        An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n    - `destinations` : iterable objects\n        An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n    - `append_od` : bool\n        If True, the method also returns a matrix of origin-destination pairs.\n\n    Returns\n    -------\n    - `distance_matrix` : pandas.DataFrame\n        A pandas DataFrame containing the distance matrix.\n    \"\"\"\n\n    # check if the origins and destinations is numpy array\n    # if so, convert it to list\n    origins = gtl.convert_to_list(origins)\n    destinations = gtl.convert_to_list(destinations)\n\n    url = self._get_matrix_distance_url(origins, destinations)\n    res = super()._get_request(url)\n    distance_matrix = self._parse_distance_matrix(res)\n    if append_od:\n        od_matrix = super()._get_OD_matrix(origins, destinations)\n        distance_matrix = pd.concat([od_matrix, distance_matrix], axis=1)\n\n    return distance_matrix\n</code></pre>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_distances_batch","title":"<code>get_distances_batch(self, origins, destinations, append_od=False)</code>","text":"<p>This method returns a Pandas dataframe contains duration and disatnce for all the <code>origins</code> and <code>destinations</code> pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.</p> <p>The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.</p> <p>If the <code>append_od</code> parameter is set to True, the method also returns the input origin-destination pairs.</p>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_distances_batch--parameters","title":"Parameters","text":"<ul> <li> <p><code>origins</code> : iterable objects     An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>destinations</code> : iterable objects     An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.     It should be in the form of iterable objects with two elements, such as     (latitude, longitude) or [latitude, longitude].</p> </li> <li> <p><code>append_od</code> : bool     If True, the method also returns the input origin-destination pairs.</p> </li> </ul>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_distances_batch--returns","title":"Returns","text":"<ul> <li><code>distance_matrix</code> : pandas.DataFrame     A pandas DataFrame containing the distance matrix.</li> </ul> Source code in <code>georouting/routers/bing.py</code> <pre><code>def get_distances_batch(self, origins, destinations, append_od=False):\n    \"\"\"\n    This method returns a Pandas dataframe contains duration and disatnce for all the `origins` and `destinations` pairs. Use this function if you don't want to get duration and distance for all possible combinations between each origin and each destination.\n\n    The origins and destinations parameters are lists of origin-destination pairs. They should be the same length.\n\n    If the `append_od` parameter is set to True, the method also returns the input origin-destination pairs.\n\n    Parameters\n    ----------\n    - `origins` : iterable objects\n        An iterable object containing the origin points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `destinations` : iterable objects\n        An iterable object containing the destination points. It can be a list of tuples, a list of lists, a list of arrays, etc.\n        It should be in the form of iterable objects with two elements, such as\n        (latitude, longitude) or [latitude, longitude].\n\n    - `append_od` : bool\n        If True, the method also returns the input origin-destination pairs.\n\n    Returns\n    -------\n    - `distance_matrix` : pandas.DataFrame\n        A pandas DataFrame containing the distance matrix.\n\n    \"\"\"\n    return super().get_distances_batch(\n        origins, destinations, max_batch_size=650, append_od=append_od\n    )\n</code></pre>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_route","title":"<code>get_route(self, origin, destination)</code>","text":"<p>This method returns a Route object representing the route between the origin and destination points. The origin and destination parameters are tuples/list/arrays representing the starting and ending points for the route. The orgin and destination parameters should be in the form of iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude].</p>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_route--parameters","title":"Parameters","text":"<ul> <li> <p><code>origin</code> : iterable objects     The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]</p> </li> <li> <p><code>destination</code> : iterable objects     The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]</p> </li> </ul>"},{"location":"georouting/#georouting.routers.bing.BingRouter.get_route--returns","title":"Returns","text":"<ul> <li><code>route</code> : Route object     The route between the origin and destination.</li> </ul> <p>The returned Route object has the following functions:</p> <ul> <li><code>get_distance()</code> returns the distance of the route in meters.</li> <li><code>get_duration()</code> returns the duration of the route in seconds.</li> <li><code>get_route()</code> returns the raw route data returned as a dictionary.</li> <li><code>get_route_geodataframe()</code> returns the route as a GeoDataFrame.</li> </ul> Source code in <code>georouting/routers/bing.py</code> <pre><code>def get_route(self, origin, destination):\n    \"\"\"\n    This method returns a Route object representing the route between the origin and destination points.\n    The origin and destination parameters are tuples/list/arrays representing the starting and ending points for the route.\n    The orgin and destination parameters should be in the form of iterable objects with two elements, such as\n    (latitude, longitude) or [latitude, longitude].\n\n    Parameters\n    ----------\n    - `origin` : iterable objects\n        The origin point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n    - `destination` : iterable objects\n        The destination point. Iterable objects with two elements, such as (latitude, longitude) or [latitude, longitude]\n\n    Returns\n    -------\n    - `route` : Route object\n        The route between the origin and destination.\n\n    The returned Route object has the following functions:\n\n    - `get_distance()` returns the distance of the route in meters.\n    - `get_duration()` returns the duration of the route in seconds.\n    - `get_route()` returns the raw route data returned as a dictionary.\n    - `get_route_geodataframe()` returns the route as a GeoDataFrame.\n\n    \"\"\"\n\n    url = self._get_directions_url(origin, destination)\n    route = super()._get_request(url)\n    route = Route(BingRoute(route), origin, destination)\n    return route\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":""},{"location":"installation/#using-pip","title":"Using pip","text":"<p>To install georouting, run this command in your terminal:</p> <pre><code>pip install georouting\n</code></pre> <p>or install from GitHub source</p> <pre><code>pip install git+https://github.com/wybert/georouting.git\n</code></pre> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#using-conda","title":"Using conda","text":"<pre><code>conda install -c conda-forge georouting\n</code></pre> <p>or use mamba</p> <pre><code>mamba install -c conda-forge georouting\n</code></pre>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for georouting can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/wybert/georouting\n</code></pre> <p>Then install it with:</p> <pre><code>python setup.py install\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>georouting requires:</p> <ul> <li>Python (&gt;= 3.6)</li> <li>pandas (&gt;= 0.25.0)</li> <li>geopandas (&gt;= 0.6.0)</li> <li>requests (&gt;= 2.22.0)</li> <li>numpy (&gt;= 1.17.0)</li> <li>shapely (&gt;= 1.6.4.post2)</li> <li>pyproj (&gt;= 2.4.2.post1)</li> </ul>"},{"location":"usage/","title":"Usage","text":"In\u00a0[\u00a0]: Copied! <pre>pip install georouting\n</pre> pip install georouting In\u00a0[1]: Copied! <pre>import pandas as pd\ndata = pd.read_csv(\n    \"https://raw.githubusercontent.com/wybert/georouting/main/docs/data/sample_3.csv\",\n    index_col=0)\ndata = data[['ZIP_lat', 'ZIP_lon', 'AHA_ID_lat', 'AHA_ID_lon']]\ndata.head()\n</pre> import pandas as pd data = pd.read_csv(     \"https://raw.githubusercontent.com/wybert/georouting/main/docs/data/sample_3.csv\",     index_col=0) data = data[['ZIP_lat', 'ZIP_lon', 'AHA_ID_lat', 'AHA_ID_lon']] data.head() Out[1]: ZIP_lat ZIP_lon AHA_ID_lat AHA_ID_lon 6010 42.376239 -72.605400 42.819978 -73.916518 5333 42.293923 -72.967189 41.753841 -72.682788 7678 42.158520 -72.585325 40.709320 -74.212500 In\u00a0[2]: Copied! <pre>origin = [data.iloc[2][\"ZIP_lat\"],data.iloc[2][\"ZIP_lon\"]]\ndestination = [data.iloc[2][\"AHA_ID_lat\"],data.iloc[2][\"AHA_ID_lon\"]]\n\norigins = data[['ZIP_lat', 'ZIP_lon']].values.tolist()\ndestinations = data[['AHA_ID_lat', 'AHA_ID_lon']].values.tolist()\n</pre> origin = [data.iloc[2][\"ZIP_lat\"],data.iloc[2][\"ZIP_lon\"]] destination = [data.iloc[2][\"AHA_ID_lat\"],data.iloc[2][\"AHA_ID_lon\"]]  origins = data[['ZIP_lat', 'ZIP_lon']].values.tolist() destinations = data[['AHA_ID_lat', 'AHA_ID_lon']].values.tolist() <p>Get a route between two points is easy,</p> In\u00a0[3]: Copied! <pre>from georouting.routers import OSRMRouter\n# create a router object \nrouter = OSRMRouter(mode=\"driving\")\n# get the route between the origin and destination, this will return a Route object\n# this will call the OSRM API\nroute = router.get_route(origin, destination)\n# Now you can get the distance and duration of the route in meters and seconds\nprint(\"Distance: {} meters\".format(route.get_distance()))\nprint(\"Duration: {} seconds\".format(route.get_duration()))\n</pre> from georouting.routers import OSRMRouter # create a router object  router = OSRMRouter(mode=\"driving\") # get the route between the origin and destination, this will return a Route object # this will call the OSRM API route = router.get_route(origin, destination) # Now you can get the distance and duration of the route in meters and seconds print(\"Distance: {} meters\".format(route.get_distance())) print(\"Duration: {} seconds\".format(route.get_duration())) <pre>Distance: 268234.5 meters\nDuration: 12313.4 seconds\n</pre> <p>You can easily get the distance, duration.</p> <p>You can also return the routing results in a GeoDataFrame, It will return the distance, duration, speed and the route geometry,</p> In\u00a0[4]: Copied! <pre>df= route.get_route_geopandas()\ndf.head()\n</pre> df= route.get_route_geopandas() df.head() Out[4]: geometry duration (s) distance (m) speed (m/s) 0 LINESTRING (-72.58532 42.15852, -72.58523 42.1... 22.6 279.5 12.367257 1 LINESTRING (-72.58194 42.15850, -72.58194 42.1... 12.3 163.2 13.268293 2 LINESTRING (-72.58090 42.15734, -72.58092 42.1... 128.2 1929.9 15.053822 3 LINESTRING (-72.58196 42.14028, -72.58205 42.1... 111.8 1703.5 15.237030 4 LINESTRING (-72.58437 42.12533, -72.58492 42.1... 98.1 1783.3 18.178389 <p>You can visualize the route in a map,</p> In\u00a0[5]: Copied! <pre>route.plot_route()\n</pre> route.plot_route() Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>distance_matrix = router.get_distance_matrix(origins, destinations, append_od=True)\ndistance_matrix.head()\n</pre> distance_matrix = router.get_distance_matrix(origins, destinations, append_od=True) distance_matrix.head() Out[6]: orgin_lat orgin_lon destination_lat destination_lon distance (m) duration (s) 0 42.376239 -72.605400 42.819978 -73.916518 185141.8 8639.8 1 42.376239 -72.605400 41.753841 -72.682788 82634.6 4058.1 2 42.376239 -72.605400 40.709320 -74.212500 300008.0 13819.9 3 42.293923 -72.967189 42.819978 -73.916518 126934.5 6829.4 4 42.293923 -72.967189 41.753841 -72.682788 90821.8 5550.6 <p>Sometimes you may want to get the durations and distances for some specific origin-destination pairs not for all possible combinations between them. you can use the <code>get_distances_batch</code> function.</p> In\u00a0[7]: Copied! <pre>distances = router.get_distances_batch(origins, destinations, append_od=True)\ndistances\n</pre> distances = router.get_distances_batch(origins, destinations, append_od=True) distances Out[7]: origin_lat origin_lon destination_lat destination_lon distance (m) duration (s) 0 42.376239 -72.605400 42.819978 -73.916518 185141.8 8639.8 0 42.293923 -72.967189 41.753841 -72.682788 90821.8 5550.6 0 42.158520 -72.585325 40.709320 -74.212500 268234.5 12313.4 <p>It will automatically split the OD pairs into batches and get the distance matrix for each batch to avoid the API limit.</p> <p><code>georouting</code> provides a unified API for routing services, you can use the similar code to get the routing results from different routing services like Google Maps, Bing Maps, OSRM, etc.</p>"},{"location":"usage/#usage","title":"Usage\u00b6","text":""},{"location":"usage/#prepare-some-data","title":"Prepare some data\u00b6","text":""},{"location":"usage/#get-a-route-use-osrm","title":"Get a route use OSRM\u00b6","text":""},{"location":"usage/#get-a-distance-matrix","title":"Get a distance matrix\u00b6","text":""},{"location":"usage/#get-distances-according-od-pairs","title":"Get distances according OD pairs\u00b6","text":""},{"location":"usage/#whats-more","title":"What's more\u00b6","text":""},{"location":"usage_/","title":"Usage","text":"<p>Here is a simple example of how to use georouting:</p> <pre><code># Load the some data\nimport pandas as pd\ndata = pd.read_csv(\"https://raw.githubusercontent.com/wybert/georouting/main/docs/data/sample_3.csv\",index_col=0)\ndata.head()\n\n# Get a route between two points is easy, \nfrom georouting.routers import GoogleRouter\n# create a router object with the google_key\nrouter = GoogleRouter(google_key,mode=\"driving\")\n# get the route between the origin and destination, this will return a Route object\n# this will call the Google Maps API\nroute = router.get_route([one_od_pair[\"ZIP_lat\"],one_od_pair[\"ZIP_lon\"]],\n                           [one_od_pair[\"AHA_ID_lat\"],one_od_pair[\"AHA_ID_lon\"]])\n# Now you can get the distance and duration of the route in meters and seconds\nprint(\"Distance: {} meters\".format(route.get_distance()))\nprint(\"Duration: {} seconds\".format(route.get_duration()))\n\n# You can also return the routing results in a GeoDataFrame, \n# It will return the distance, duration, speed and the route geometry,\n\ndf= route.get_route_geopandas()\ndf.head()\n\n# Now can visualize the route in a map,\n\ndf.explore(column=\"speed (m/s)\",style_kwds={\"weight\":11,\"opacity\":0.8})\n</code></pre> <p>For more examples, please refer to the Documentation</p>"}]}